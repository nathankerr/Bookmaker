#!/usr/bin/env python

from __future__ import print_function

import argparse
from tempfile import mkdtemp
import os, shutil, itertools
import sys

VERSION="0.1"

if sys.version_info[0] == 3:
	from subprocess import getstatusoutput
else:
	from commands import getstatusoutput

def processargs():
	# argparse was new in python 2.7
	parser = argparse.ArgumentParser(description='DIY Books from PDFs')

	parser.add_argument('--paper', choices=['a4', 'letter'], default='a4',
		help='Size of paper to be printed on. Default is a4')
	parser.add_argument('--type', choices=['auto', 'chapbook', 'perfect'], default='auto',
		help='Type of imposition to make. Auto automatically chooses between the two. Default is auto')
	parser.add_argument('--trim', choices=['even-odd', 'document', 'per-page'], default='even-odd',
		help='Controls how whitespace is trimmed off. Default is even-odd.')
	parser.add_argument('--print', dest="printfile", action='store_true', default=False, help='send result to default printer')
	parser.add_argument('--printer', help='print result to specific printer (implies --print)')
	parser.add_argument('--version', action="version", version="Version: %s" % VERSION, help='prints the version string and exits')
	parser.add_argument('input', help='PDF to convert into a book')
	parser.add_argument('output', help='Where to store the new book', default=None, nargs='?')

	args = parser.parse_args()

	if args.printer:
		args.printfile = True
	if not args.output and not args.printfile:
		if args.input.lower().endswith(".pdf"):
			base = os.path.splitext(args.input)[0]
		else:
			base = args.input
		if os.path.exists("%s.book.pdf" % base):
			num = 2
			while os.path.exists("%s.book_%d.pdf" % (base, num)):
				num += 1
			args.output = "%s.book_%d.pdf" % (base, num)
		else:
			args.output = "%s.book.pdf" % base
		assert not os.path.exists(args.output)

	return args

def getoutput(cmd):
	status, output = getstatusoutput(cmd)
	if status:
		raise Exception("Error when executing: %s\n%s" % (cmd, output))
	return output

def calc_bbox(boxes):
	# consume all boxes element by element and calculate min/max of each row
	if len(boxes) > 1:
		return list(itertools.imap(min, *boxes))[:2] + list(itertools.imap(max, *boxes))[2:]
	elif len(boxes) == 1:
		return boxes[0]
	else:
		return [0.0, 0.0, 0.0, 0.0]

def isEmptyPage(bbox):
	return bbox == [0.0, 0.0, 0.0, 0.0]

def main():
	args = processargs()
	
	tmpdir = mkdtemp()
	shutil.copyfile(args.input, os.path.join(tmpdir, 'input.pdf'))

	wd = os.getcwd()
	os.chdir(tmpdir)

	print('Inspecting PDF')
	boundingboxes = getoutput('gs -sDEVICE=bbox -dSAFER -dPARANOIDSAFER -dNOPAUSE -dBATCH input.pdf 2<&1|grep %%HiResBoundingBox').splitlines()
	npages = len(boundingboxes)
	
	if args.type == 'auto':
		if npages <= 24:
			args.type = 'chapbook'
		else:
			args.type = 'perfect'
	types = {'chapbook':'chapbook', 'perfect':'perfect bound book'}
	print('Creating a PDF for a %s on %s paper' % (types[args.type], args.paper))

	# drop %BoundingBox field and convert rest to float
	boxes = [list(map(float, bboxline.split()[1:])) for bboxline in boundingboxes]
	if(args.trim == 'even-odd'):
		# compound bounding box of all non-empty odd/even pages
		even_box = calc_bbox([bbox for bbox in boxes[1::2] if not isEmptyPage(bbox)]) 
		odd_box = calc_bbox([bbox for bbox in boxes[0::2] if not isEmptyPage(bbox)])
	elif (args.trim == 'document'):
		# compound bounding box of all non-empty pages
		documentbox = calc_bbox([bbox for bbox in boxes if not isEmptyPage(bbox)])
	# Nothing to do for per-page

	print('Trimming Pages')
	# --bbox "--bbox "<left> <bottom> <right> <top>""
	if (args.trim == 'even-odd'):
		crop_str = '--bbox-even "%f %f %f %f" --bbox-odd "%f %f %f %f"' % tuple(even_box + odd_box)
	elif (args.trim == 'document'):
		crop_str = '--bbox "%f %f %f %f"' % tuple(documentbox)
	else: # per-page
		crop_str = ""
	getoutput('pdfcrop --restricted %s input.pdf cropped.pdf' % crop_str)
	
	print('Imposing Pages')
	intermediate_tex = os.path.join(tmpdir, 'intermediate.tex')
	intermediate_pdf = os.path.join(tmpdir, 'intermediate.pdf')
	intermediate = open(intermediate_tex, 'w')

	papersizes = {'a4':'\setuppapersize[A5][A4,landscape]', 'letter':"\definepapersize[halfletter][width=5.5in,height=8.5in]\n\setuppapersize[halfletter][letter,landscape]"}
	intermediate.write("%s\n" % papersizes[args.paper])

	typesetups = {'chapbook':'\setuparranging[2UP,doublesided]', 'perfect':'\setuparranging[2*2,doublesided]'}
	intermediate.write("%s\n" % typesetups[args.type])

	intermediate.write('''
\setuplayout[backspace=12.7mm,rightmargin=5mm,width=fit,leftmargindistance=0mm,rightmargindistance=0mm,
	header=0mm,footer=\\baselineskip,topspace=5mm,height=middle]
\setuppagenumbering[location=marginedge,alternative=doublesided]
\setupfloats[spacebefore=none,margin=0pt]
\starttext
''')

	intermediate.write('''
\getfiguredimensions[cropped.pdf]
\dorecurse\\noffigurepages
	{\ifodd\\recurselevel
		\setupfloats[location=left]
	\else
		\setupfloats[location=right]
	\\fi
	\placefigure{none}{\externalfigure[cropped.pdf][page=\\recurselevel, factor=fit]}}
''')

	intermediate.write('\n\stoptext\n')
	intermediate.close()

	getoutput('context --paranoid --batchmode --noconsole %s' % intermediate_tex)

	if args.printfile:
		print('Sending document to printer')
		printeropt = '-d %r' % args.printer if args.printer else ''
		getoutput("pdf2ps %s - | lp %s -o sides=two-sided-long-edge -" % (intermediate_pdf, printeropt))
	
	os.chdir(wd)
	if args.output:
		print('Writing book to %s' % args.output)
		shutil.move(intermediate_pdf, args.output)

	# cleanup
	shutil.rmtree(tmpdir)

	print('Done')

if __name__ == '__main__':
	main()