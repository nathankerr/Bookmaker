#!/usr/bin/env python

from __future__ import print_function

import argparse
from tempfile import mkdtemp
import os, shutil, itertools
import sys
from time import time

VERSION="0.2rc2"

if sys.version_info[0] == 3:
	from subprocess import getstatusoutput
else:
	from commands import getstatusoutput

def main():
	options = processargs()

	(origDir, tempDir) = setupEnvironment(options.input)

	displayOptions(options)

	start = starttime('Inspecting PDF ')
	(boundingboxes, cropboxes) = getBoundingBoxes(options.trim)
	finishtime(start)
	
	start = starttime('Imposing PDF ')
	intermediate_pdf = makepdf(options.paper, options.type, options.nopagenumbers, boundingboxes, cropboxes, options.trim)
	finishtime(start)

	if options.printfile:
		print_pdf(intermediate_pdf, printer)

	cleanupEnvironment(origDir, tempDir, options.output, intermediate_pdf)

	print('Done')

def setupEnvironment(input):
	tmpdir = mkdtemp()
	shutil.copyfile(input, os.path.join(tmpdir, 'input.pdf'))

	wd = os.getcwd()
	os.chdir(tmpdir)

	return (wd, tmpdir)

def cleanupEnvironment(origDir, tempDir, output, intermediate_pdf):
	os.chdir(origDir)
	if output:
		print('Writing book to %s' % output)
		src_pdf = os.path.join(tempDir, intermediate_pdf)
		shutil.move(src_pdf, output)
	shutil.rmtree(tempDir)

def print_pdf(intermediate_pdf, printer):
	print('Sending document to printer')
	printeropt = '-d %r' % printer if printer else ''
	getoutput("pdf2ps %s - | lp %s -o sides=two-sided-long-edge -" % (intermediate_pdf, printeropt))

def starttime(message):
	start = time()
	sys.stdout.write(message)
	sys.stdout.flush()
	return start

def finishtime(start):
	print("%fs" % (time() - start))

def displayOptions(options):
	types = {'chapbook':'chapbook', 'perfect':'perfect bound book'}
	print('Creating a PDF for a %s on %s paper' % (types[options.type], options.paper))

def getBoundingBoxes(trim):
	boundingboxes = getoutput('gs -sDEVICE=bbox -dSAFER -dPARANOIDSAFER -dNOPAUSE -dBATCH input.pdf 2<&1|grep %%HiResBoundingBox').splitlines()

	# drop %BoundingBox field and convert rest to float
	boxes = [list(map(float, bboxline.split()[1:])) for bboxline in boundingboxes]
	if(trim == 'even-odd'):
		# compound bounding box of all non-empty odd/even pages
		even_box = calc_bbox([bbox for bbox in boxes[1::2] if not isEmptyPage(bbox)]) 
		odd_box = calc_bbox([bbox for bbox in boxes[0::2] if not isEmptyPage(bbox)])
		crop_box = tuple(bbox_to_crop(odd_box) + bbox_to_crop(even_box))
	elif (trim == 'document'):
		# compound bounding box of all non-empty pages
		documentbox = calc_bbox([bbox for bbox in boxes if not isEmptyPage(bbox)])
		crop_box = tuple(bbox_to_crop(documentbox) + bbox_to_crop(documentbox))
	# Nothing to do for per-page

	return (boundingboxes, crop_box)

def processargs():
	# argparse was new in python 2.7
	parser = argparse.ArgumentParser(description='DIY Books from PDFs')

	parser.add_argument('--paper', choices=['a4', 'letter'], default='a4',
		help='Size of paper to be printed on. Default is a4')
	parser.add_argument('--type', choices=['chapbook', 'perfect'], default='chapbook',
		help='Type of imposition to make. Auto automatically chooses between the two. Default is chapbook')
	parser.add_argument('--trim', choices=['even-odd', 'document', 'per-page'], default='even-odd',
		help='Controls how whitespace is trimmed off. Default is even-odd.')
	parser.add_argument('--nopagenumbers', dest="nopagenumbers", action="store_true", default=False, help='suppress additional page numbers')
	parser.add_argument('--print', dest="printfile", action='store_true', default=False, help='send result to default printer')
	parser.add_argument('--printer', help='print result to specific printer (implies --print)')
	parser.add_argument('--version', action="version", version="Version: %s" % VERSION, help='prints the version string and exits')
	parser.add_argument('input', help='PDF to convert into a book')
	parser.add_argument('output', help='Where to store the new book', default=None, nargs='?')

	args = parser.parse_args()

	if args.printer:
		args.printfile = True
	if not args.output and not args.printfile:
		if args.input.lower().endswith(".pdf"):
			base = os.path.splitext(args.input)[0]
		else:
			base = args.input
		if os.path.exists("%s.book.pdf" % base):
			num = 2
			while os.path.exists("%s.book_%d.pdf" % (base, num)):
				num += 1
			args.output = "%s.book_%d.pdf" % (base, num)
		else:
			args.output = "%s.book.pdf" % base
		assert not os.path.exists(args.output)

	return args

def getoutput(cmd):
	status, output = getstatusoutput(cmd)
	if status:
		raise Exception("Error when executing: %s\n%s" % (cmd, output))
	return output

def calc_bbox(boxes):
	# consume all boxes element by element and calculate min/max of each row
	if len(boxes) > 1:
		return list(itertools.imap(min, *boxes))[:2] + list(itertools.imap(max, *boxes))[2:]
	elif len(boxes) == 1:
		return boxes[0]
	else:
		return [0.0, 0.0, 0.0, 0.0]

def isEmptyPage(bbox):
	return bbox == [0.0, 0.0, 0.0, 0.0]

# from
# left bottom right top
# to
# top hoffset width height
def bbox_to_crop(box):
		left = box[0]
		bottom = box[1]
		right = box[2]
		top = box[3]
		return [top, left, right-left, top-bottom]

def makepdf(paper, booktype, nopagenumbers, boundingboxes, crop_box, trim):
	intermediate_tex = 'intermediate.tex'
	intermediate_pdf = 'intermediate.pdf'
	intermediate = open(intermediate_tex, 'w')

	papersizes = {'a4':'\setuppapersize[A5][A4,landscape]', 'letter':"\definepapersize[halfletter][width=5.5in,height=8.5in]\n\setuppapersize[halfletter][letter,landscape]"}
	intermediate.write("%s\n" % papersizes[paper])

	typesetups = {'chapbook':'\setuparranging[2UP,doublesided]', 'perfect':'\setuparranging[2*2,doublesided]'}
	intermediate.write("%s\n" % typesetups[booktype])

	if not nopagenumbers:
		intermediate.write('''
\setuppagenumbering[location=marginedge,alternative=doublesided]
\setuplayout[footer=\\baselineskip]
''')
	else:
		intermediate.write('''
\setuplayout[footer=\\baselineskip]
''')

	# general document setup
	intermediate.write('''
\setuplayout[backspace=12.7mm,rightmargin=5mm,width=fit,leftmargindistance=0mm,rightmargindistance=0mm,
	header=0mm,topspace=5mm,height=middle]
\setupfloats[spacebefore=none,margin=0pt]
\starttext
\getfiguredimensions[input.pdf]
''')

	# crops are different for document wide bounding boxes (even-odd and document) and per-page boxes
	if trim != "per-page":
		intermediate.write('''
\dorecurse\\noffigurepages
	{\ifodd\\recurselevel
		\setupfloats[location=left]
		\placefigure{none}{\scale[factor=fit]{\clip[voffset=\\the\\dimexpr\\figurenaturalheight-%fbp, hoffset=%fbp, width=%fbp, height=%fbp]{\externalfigure[input.pdf][page=\\recurselevel]}}}
	\else
		\setupfloats[location=right]
		\placefigure{none}{\scale[factor=fit]{\clip[voffset=\\the\\dimexpr\\figurenaturalheight-%fbp, hoffset=%fbp, width=%fbp, height=%fbp]{\externalfigure[input.pdf][page=\\recurselevel]}}}
	\\fi
	}
''' % crop_box)
	else:
		for page in range(len(boxes)):
			if page % 2 == 0: # even
				intermediate.write('\setupfloats[location=left]')
			else: #odd
				intermediate.write('\setupfloats[location=left]')
			
			# must use page+1 in ConTeX because it indexes starting with 1
			intermediate.write('''\placefigure{none}{\scale[factor=fit]{\clip[voffset=\\the\\dimexpr\\figurenaturalheight-%fbp, hoffset=%fbp, width=%fbp, height=%fbp]{\externalfigure[input.pdf][page=%d]}}}
''' % tuple(bbox_to_crop(boxes[page]) + [page+1]))

	# finish it off
	intermediate.write('''\stoptext''')
	intermediate.close()

	getoutput('context --paranoid --batchmode --noconsole %s' % intermediate_tex)

	return intermediate_pdf

if __name__ == '__main__':
	main()